---
description: "Logging and debugging standards for consistent and effective application monitoring"
globs: ["**/*.log", "**/logs/*", "**/logging.config.*"]
---
# Logging Standards

## Log Levels
```yaml
levels:
  ERROR:
    priority: 0
    use_when: "Application errors that need immediate attention"
    examples:
      - Database connection failures
      - API authentication errors
      - Data corruption issues
      - System crashes

  WARN:
    priority: 1
    use_when: "Potentially harmful situations that don't stop the application"
    examples:
      - Deprecated feature usage
      - Resource threshold warnings
      - Retry attempts
      - Configuration issues

  INFO:
    priority: 2
    use_when: "Important business events and milestones"
    examples:
      - Application startup/shutdown
      - User authentication
      - Batch job completion
      - Configuration changes

  DEBUG:
    priority: 3
    use_when: "Detailed information for debugging"
    examples:
      - Function entry/exit
      - Variable values
      - API responses
      - SQL queries

  TRACE:
    priority: 4
    use_when: "Very detailed debugging information"
    examples:
      - Loop iterations
      - Method parameters
      - Temporary variables
      - Step-by-step execution
```

## Log Format
```yaml
standard_format:
  timestamp:
    format: "ISO-8601"
    example: "2024-01-31T14:30:00.000Z"
    required: true

  level:
    format: "UPPERCASE"
    padding: 5
    required: true

  context:
    service_name: required
    environment: required
    instance_id: optional
    correlation_id: recommended

  message:
    format: "Structured and clear"
    max_length: 1000
    required: true

  metadata:
    file: recommended
    line_number: recommended
    function: recommended
    request_id: conditional

example: |
  2024-01-31T14:30:00.000Z [ERROR] [UserService] [prod-eu1] Failed to authenticate user - Invalid credentials
    correlation_id: abc-123
    user_id: user123
    ip: 192.168.1.1
    attempt: 3/3
```

## Structured Logging
```yaml
json_format:
  {
    "timestamp": "2024-01-31T14:30:00.000Z",
    "level": "ERROR",
    "service": "UserService",
    "environment": "production",
    "message": "Failed to authenticate user",
    "context": {
      "user_id": "user123",
      "ip": "192.168.1.1",
      "attempt": 3
    },
    "metadata": {
      "correlation_id": "abc-123",
      "request_id": "req-456"
    }
  }
```

## Log Categories

### Application Lifecycle
```yaml
startup:
  - Configuration loading
  - Service initialization
  - Database connections
  - Cache warming

shutdown:
  - Resource cleanup
  - Connection closing
  - State saving
  - Final statistics
```

### Security Events
```yaml
required_logging:
  - Authentication attempts
  - Authorization failures
  - Permission changes
  - Security breaches
  - API key usage
  - Rate limit hits
```

### Performance Metrics
```yaml
metrics:
  - Response times
  - Resource usage
  - Cache hits/misses
  - Queue lengths
  - Database operations
  - External API calls
```

## Best Practices

### General Guidelines
- Use appropriate log levels
- Include context in every log
- Structure messages consistently
- Enable log rotation
- Implement rate limiting
- Use correlation IDs
- Add stack traces for errors

### What to Log
```yaml
always_log:
  - Application state changes
  - Security events
  - Data validation failures
  - External service interactions
  - Background job status
  - Configuration changes

never_log:
  - Passwords
  - API keys
  - Personal data
  - Credit card numbers
  - Authentication tokens
  - Internal URLs
```

### Performance Considerations
- Use async logging
- Implement log buffering
- Configure appropriate log levels per environment
- Rotate logs based on size/time
- Compress old logs
- Clean up old log files
- Monitor log volume

## Debug Practices

### Debug Levels
```yaml
levels:
  VERBOSE:
    use: "Detailed function-level information"
    environment: "Development only"

  STEP:
    use: "Step-by-step execution flow"
    environment: "Development/Testing"

  DIAGNOSTIC:
    use: "System health and performance"
    environment: "All environments"
```

### Debug Information
```yaml
context_data:
  request:
    - HTTP method
    - URL
    - Headers
    - Query parameters
    - Body (sanitized)

  response:
    - Status code
    - Headers
    - Body (sanitized)
    - Response time

  system:
    - Memory usage
    - CPU usage
    - Thread count
    - Connection pool status
```

## Implementation Examples

### Winston Configuration
```javascript
const winston = require('winston');

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  defaultMeta: { service: 'user-service' },
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});
```

### Pino Configuration
```javascript
const pino = require('pino');

const logger = pino({
  level: process.env.LOG_LEVEL || 'info',
  timestamp: pino.stdTimeFunctions.isoTime,
  formatters: {
    level: (label) => ({ level: label.toUpperCase() })
  },
  base: { service: 'user-service' }
});
```

## Monitoring and Alerting

### Log Aggregation
```yaml
tools:
  - ELK Stack
  - Splunk
  - Datadog
  - Grafana Loki
  - CloudWatch

features:
  - Real-time aggregation
  - Search capabilities
  - Visualization
  - Alerting
  - Retention policies
```

### Alert Configuration
```yaml
triggers:
  error_rate:
    threshold: "Error count > 10 in 5 minutes"
    severity: High
    action: "Immediate notification"

  warning_rate:
    threshold: "Warning count > 100 in 15 minutes"
    severity: Medium
    action: "Daily report"

notification_channels:
  - Email
  - Slack
  - PagerDuty
  - SMS
  - Webhook
```

## Security Guidelines
- Encrypt sensitive logs
- Implement log access control
- Regular log audits
- Secure log transmission
- Sanitize logged data
- Monitor log access
- Implement retention policies